// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'plans_controller.g.dart';

class PlansController = PlansControllerBase with _$PlansController;

abstract class PlansControllerBase with Store, BaseController {
  final PlansRepository plansRepository;
  final AlertContract alert;
  final GoRouter router;

  PlansControllerBase(this.plansRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late PlanModel plan;
  
  @observable
  List<PlanModel> listPlan = [];
  
  @observable
  late FindPlanUrlParam findPlanUrlParam;
  
  @observable
  late AddPlanBodyParam addPlanBodyParam;
  
  @observable
  late EditPlanBodyParam editPlanBodyParam;
  
  @observable
  late EditPlanUrlParam editPlanUrlParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingFindPlan = false;
  
  @observable
  bool isLoadingListPlans = false;
  
  @observable
  bool isLoadingAddPlan = false;
  
  @observable
  bool isLoadingEditPlan = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setPlan(PlanModel data) {
    plan = data;
  }
  
  @action
  void setListPlan(List<PlanModel> data) {
    listPlan = data;
  }
  
  @action
  void setFindPlanUrlParam(FindPlanUrlParam data) {
    findPlanUrlParam = data;
  }
  
  @action
  void setAddPlanBodyParam(AddPlanBodyParam data) {
    addPlanBodyParam = data;
  }
  
  @action
  void setEditPlanBodyParam(EditPlanBodyParam data) {
    editPlanBodyParam = data;
  }
  
  @action
  void setEditPlanUrlParam(EditPlanUrlParam data) {
    editPlanUrlParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingFindPlan(bool isLoading) {
    isLoadingFindPlan = isLoading;
  }
  
  @action
  void setIsLoadingListPlans(bool isLoading) {
    isLoadingListPlans = isLoading;
  }
  
  @action
  void setIsLoadingAddPlan(bool isLoading) {
    isLoadingAddPlan = isLoading;
  }
  
  @action
  void setIsLoadingEditPlan(bool isLoading) {
    isLoadingEditPlan = isLoading;
  }
  
  @action
  Future<bool> findPlan() async {
    setIsLoadingFindPlan(true);
  
    Either<PlanModel> response = await plansRepository.findPlan(
      urlParams: findPlanUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindPlan(false);
  
      return false;
    }
  
    if (response.isRight) {
      setPlan(response.right!);
  
      setIsLoadingFindPlan(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> listPlans() async {
    setIsLoadingListPlans(true);
  
    Either<PaginatedData<PlanModel>> response = await plansRepository.listPlans();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListPlans(false);
  
      return false;
    }
  
    if (response.isRight) {
      setListPlan(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListPlans(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> addPlan() async {
    setIsLoadingAddPlan(true);
  
    Either<PlanModel> response = await plansRepository.addPlan(
      params: addPlanBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddPlan(false);
  
      return false;
    }
  
    if (response.isRight) {
      setPlan(response.right!);
  
      setIsLoadingAddPlan(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> editPlan() async {
    setIsLoadingEditPlan(true);
  
    Either<bool> response = await plansRepository.editPlan(
      params: editPlanBodyParam,
      urlParams: editPlanUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditPlan(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditPlan(false);
  
      return true;
    }
  
    return false;
  }
  
}
