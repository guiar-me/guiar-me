// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'credit_cards_controller.g.dart';

class CreditCardsController = CreditCardsControllerBase with _$CreditCardsController;

abstract class CreditCardsControllerBase with Store, BaseController {
  final CreditCardsRepository creditCardsRepository;
  final AlertContract alert;
  final GoRouter router;

  CreditCardsControllerBase(this.creditCardsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late CreditCardModel creditCard;
  
  @observable
  List<CreditCardModel> listCreditCard = [];
  
  @observable
  late RemoveCreditCardUrlParam removeCreditCardUrlParam;
  
  @observable
  late FindCreditCardUrlParam findCreditCardUrlParam;
  
  @observable
  late AddCreditCardBodyParam addCreditCardBodyParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveCreditCard = false;
  
  @observable
  bool isLoadingFindCreditCard = false;
  
  @observable
  bool isLoadingListCreditCards = false;
  
  @observable
  bool isLoadingAddCreditCard = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setCreditCard(CreditCardModel data) {
    creditCard = data;
  }
  
  @action
  void setListCreditCard(List<CreditCardModel> data) {
    listCreditCard = data;
  }
  
  @action
  void setRemoveCreditCardUrlParam(RemoveCreditCardUrlParam data) {
    removeCreditCardUrlParam = data;
  }
  
  @action
  void setFindCreditCardUrlParam(FindCreditCardUrlParam data) {
    findCreditCardUrlParam = data;
  }
  
  @action
  void setAddCreditCardBodyParam(AddCreditCardBodyParam data) {
    addCreditCardBodyParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveCreditCard(bool isLoading) {
    isLoadingRemoveCreditCard = isLoading;
  }
  
  @action
  void setIsLoadingFindCreditCard(bool isLoading) {
    isLoadingFindCreditCard = isLoading;
  }
  
  @action
  void setIsLoadingListCreditCards(bool isLoading) {
    isLoadingListCreditCards = isLoading;
  }
  
  @action
  void setIsLoadingAddCreditCard(bool isLoading) {
    isLoadingAddCreditCard = isLoading;
  }
  
  @action
  Future<bool> removeCreditCard() async {
    setIsLoadingRemoveCreditCard(true);
  
    Either<bool> response = await creditCardsRepository.removeCreditCard(
      urlParams: removeCreditCardUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveCreditCard(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveCreditCard(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> findCreditCard() async {
    setIsLoadingFindCreditCard(true);
  
    Either<CreditCardModel> response = await creditCardsRepository.findCreditCard(
      urlParams: findCreditCardUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindCreditCard(false);
  
      return false;
    }
  
    if (response.isRight) {
      setCreditCard(response.right!);
  
      setIsLoadingFindCreditCard(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> listCreditCards() async {
    setIsLoadingListCreditCards(true);
  
    Either<PaginatedData<CreditCardModel>> response = await creditCardsRepository.listCreditCards();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListCreditCards(false);
  
      return false;
    }
  
    if (response.isRight) {
      setListCreditCard(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListCreditCards(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> addCreditCard() async {
    setIsLoadingAddCreditCard(true);
  
    Either<CreditCardModel> response = await creditCardsRepository.addCreditCard(
      params: addCreditCardBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddCreditCard(false);
  
      return false;
    }
  
    if (response.isRight) {
      setCreditCard(response.right!);
  
      setIsLoadingAddCreditCard(false);
  
      return true;
    }
  
    return false;
  }
  
}
