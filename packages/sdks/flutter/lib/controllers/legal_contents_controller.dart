// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'legal_contents_controller.g.dart';

class LegalContentsController = LegalContentsControllerBase with _$LegalContentsController;

abstract class LegalContentsControllerBase with Store, BaseController {
  final LegalContentsRepository legalContentsRepository;
  final AlertContract alert;
  final GoRouter router;

  LegalContentsControllerBase(this.legalContentsRepository, this.alert, this.router);

  // States
  @observable
  late LegalContentModel legalContent;
  
  @observable
  late FindLegalContentUrlParam findLegalContentUrlParam;
  
  @observable
  late EditLegalContentBodyParam editLegalContentBodyParam;
  
  @observable
  late EditLegalContentUrlParam editLegalContentUrlParam;
  
  @observable
  bool isLoadingFindLegalContent = false;
  
  @observable
  bool isLoadingEditLegalContent = false;
  

  // Actions
  @action
  void setLegalContent(LegalContentModel data) {
    legalContent = data;
  }
  
  @action
  void setFindLegalContentUrlParam(FindLegalContentUrlParam data) {
    findLegalContentUrlParam = data;
  }
  
  @action
  void setEditLegalContentBodyParam(EditLegalContentBodyParam data) {
    editLegalContentBodyParam = data;
  }
  
  @action
  void setEditLegalContentUrlParam(EditLegalContentUrlParam data) {
    editLegalContentUrlParam = data;
  }
  
  @action
  void setIsLoadingFindLegalContent(bool isLoading) {
    isLoadingFindLegalContent = isLoading;
  }
  
  @action
  void setIsLoadingEditLegalContent(bool isLoading) {
    isLoadingEditLegalContent = isLoading;
  }
  
  @action
  Future<bool> findLegalContent() async {
    setIsLoadingFindLegalContent(true);
  
    Either<LegalContentModel> response = await legalContentsRepository.findLegalContent(
      urlParams: findLegalContentUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindLegalContent(false);
  
      return false;
    }
  
    if (response.isRight) {
      setLegalContent(response.right!);
  
      setIsLoadingFindLegalContent(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> editLegalContent() async {
    setIsLoadingEditLegalContent(true);
  
    Either<bool> response = await legalContentsRepository.editLegalContent(
      params: editLegalContentBodyParam,
      urlParams: editLegalContentUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditLegalContent(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditLegalContent(false);
  
      return true;
    }
  
    return false;
  }
  
}
