// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'events_controller.g.dart';

class EventsController = EventsControllerBase with _$EventsController;

abstract class EventsControllerBase with Store, BaseController {
  final EventsRepository eventsRepository;
  final AlertContract alert;
  final GoRouter router;

  EventsControllerBase(this.eventsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late EventModel event;
  
  @observable
  List<EventModel> listEvent = [];
  
  @observable
  late RemoveEventUrlParam removeEventUrlParam;
  
  @observable
  late FindEventUrlParam findEventUrlParam;
  
  @observable
  late ListEventsQueryParam listEventsQueryParam;
  
  @observable
  late AddEventBodyParam addEventBodyParam;
  
  @observable
  late EditEventBodyParam editEventBodyParam;
  
  @observable
  late EditEventUrlParam editEventUrlParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveEvent = false;
  
  @observable
  bool isLoadingFindEvent = false;
  
  @observable
  bool isLoadingListEvents = false;
  
  @observable
  bool isLoadingAddEvent = false;
  
  @observable
  bool isLoadingEditEvent = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setEvent(EventModel data) {
    event = data;
  }
  
  @action
  void setListEvent(List<EventModel> data) {
    listEvent = data;
  }
  
  @action
  void setRemoveEventUrlParam(RemoveEventUrlParam data) {
    removeEventUrlParam = data;
  }
  
  @action
  void setFindEventUrlParam(FindEventUrlParam data) {
    findEventUrlParam = data;
  }
  
  @action
  void setListEventsQueryParam(ListEventsQueryParam data) {
    listEventsQueryParam = data;
  }
  
  @action
  void setAddEventBodyParam(AddEventBodyParam data) {
    addEventBodyParam = data;
  }
  
  @action
  void setEditEventBodyParam(EditEventBodyParam data) {
    editEventBodyParam = data;
  }
  
  @action
  void setEditEventUrlParam(EditEventUrlParam data) {
    editEventUrlParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveEvent(bool isLoading) {
    isLoadingRemoveEvent = isLoading;
  }
  
  @action
  void setIsLoadingFindEvent(bool isLoading) {
    isLoadingFindEvent = isLoading;
  }
  
  @action
  void setIsLoadingListEvents(bool isLoading) {
    isLoadingListEvents = isLoading;
  }
  
  @action
  void setIsLoadingAddEvent(bool isLoading) {
    isLoadingAddEvent = isLoading;
  }
  
  @action
  void setIsLoadingEditEvent(bool isLoading) {
    isLoadingEditEvent = isLoading;
  }
  
  @action
  Future<void> removeEvent() async {
    setIsLoadingRemoveEvent(true);
  
    Either<bool> response = await eventsRepository.removeEvent(
      urlParams: removeEventUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveEvent(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveEvent(false);
    }
  }
  
  @action
  Future<void> findEvent() async {
    setIsLoadingFindEvent(true);
  
    Either<EventModel> response = await eventsRepository.findEvent(
      urlParams: findEventUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindEvent(false);
    }
  
    if (response.isRight) {
      setEvent(response.right!);
  
      setIsLoadingFindEvent(false);
    }
  }
  
  @action
  Future<void> listEvents() async {
    setIsLoadingListEvents(true);
  
    Either<PaginatedData<EventModel>> response = await eventsRepository.listEvents(
      queryParams: listEventsQueryParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListEvents(false);
    }
  
    if (response.isRight) {
      setListEvent(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListEvents(false);
    }
  }
  
  @action
  Future<void> addEvent() async {
    setIsLoadingAddEvent(true);
  
    Either<EventModel> response = await eventsRepository.addEvent(
      params: addEventBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddEvent(false);
    }
  
    if (response.isRight) {
      setEvent(response.right!);
  
      setIsLoadingAddEvent(false);
    }
  }
  
  @action
  Future<void> editEvent() async {
    setIsLoadingEditEvent(true);
  
    Either<bool> response = await eventsRepository.editEvent(
      params: editEventBodyParam,
      urlParams: editEventUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditEvent(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditEvent(false);
    }
  }
  
}
