// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'reviews_controller.g.dart';

class ReviewsController = ReviewsControllerBase with _$ReviewsController;

abstract class ReviewsControllerBase with Store, BaseController {
  final ReviewsRepository reviewsRepository;
  final AlertContract alert;
  final GoRouter router;

  ReviewsControllerBase(this.reviewsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late ReviewModel review;
  
  @observable
  List<ReviewModel> listReview = [];
  
  @observable
  late RemoveReviewUrlParam removeReviewUrlParam;
  
  @observable
  late FindReviewUrlParam findReviewUrlParam;
  
  @observable
  late ListReviewsQueryParam listReviewsQueryParam;
  
  @observable
  late UpdateReviewBodyParam updateReviewBodyParam;
  
  @observable
  late UpdateReviewUrlParam updateReviewUrlParam;
  
  @observable
  late AddReviewBodyParam addReviewBodyParam;
  
  @observable
  late EditReviewBodyParam editReviewBodyParam;
  
  @observable
  late EditReviewUrlParam editReviewUrlParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveReview = false;
  
  @observable
  bool isLoadingFindReview = false;
  
  @observable
  bool isLoadingListReviews = false;
  
  @observable
  bool isLoadingUpdateReview = false;
  
  @observable
  bool isLoadingAddReview = false;
  
  @observable
  bool isLoadingEditReview = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setReview(ReviewModel data) {
    review = data;
  }
  
  @action
  void setListReview(List<ReviewModel> data) {
    listReview = data;
  }
  
  @action
  void setRemoveReviewUrlParam(RemoveReviewUrlParam data) {
    removeReviewUrlParam = data;
  }
  
  @action
  void setFindReviewUrlParam(FindReviewUrlParam data) {
    findReviewUrlParam = data;
  }
  
  @action
  void setListReviewsQueryParam(ListReviewsQueryParam data) {
    listReviewsQueryParam = data;
  }
  
  @action
  void setUpdateReviewBodyParam(UpdateReviewBodyParam data) {
    updateReviewBodyParam = data;
  }
  
  @action
  void setUpdateReviewUrlParam(UpdateReviewUrlParam data) {
    updateReviewUrlParam = data;
  }
  
  @action
  void setAddReviewBodyParam(AddReviewBodyParam data) {
    addReviewBodyParam = data;
  }
  
  @action
  void setEditReviewBodyParam(EditReviewBodyParam data) {
    editReviewBodyParam = data;
  }
  
  @action
  void setEditReviewUrlParam(EditReviewUrlParam data) {
    editReviewUrlParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveReview(bool isLoading) {
    isLoadingRemoveReview = isLoading;
  }
  
  @action
  void setIsLoadingFindReview(bool isLoading) {
    isLoadingFindReview = isLoading;
  }
  
  @action
  void setIsLoadingListReviews(bool isLoading) {
    isLoadingListReviews = isLoading;
  }
  
  @action
  void setIsLoadingUpdateReview(bool isLoading) {
    isLoadingUpdateReview = isLoading;
  }
  
  @action
  void setIsLoadingAddReview(bool isLoading) {
    isLoadingAddReview = isLoading;
  }
  
  @action
  void setIsLoadingEditReview(bool isLoading) {
    isLoadingEditReview = isLoading;
  }
  
  @action
  Future<void> removeReview() async {
    setIsLoadingRemoveReview(true);
  
    Either<bool> response = await reviewsRepository.removeReview(
      urlParams: removeReviewUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveReview(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveReview(false);
    }
  }
  
  @action
  Future<void> findReview() async {
    setIsLoadingFindReview(true);
  
    Either<ReviewModel> response = await reviewsRepository.findReview(
      urlParams: findReviewUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindReview(false);
    }
  
    if (response.isRight) {
      setReview(response.right!);
  
      setIsLoadingFindReview(false);
    }
  }
  
  @action
  Future<void> listReviews() async {
    setIsLoadingListReviews(true);
  
    Either<PaginatedData<ReviewModel>> response = await reviewsRepository.listReviews(
      queryParams: listReviewsQueryParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListReviews(false);
    }
  
    if (response.isRight) {
      setListReview(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListReviews(false);
    }
  }
  
  @action
  Future<void> updateReview() async {
    setIsLoadingUpdateReview(true);
  
    Either<bool> response = await reviewsRepository.updateReview(
      params: updateReviewBodyParam,
      urlParams: updateReviewUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingUpdateReview(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingUpdateReview(false);
    }
  }
  
  @action
  Future<void> addReview() async {
    setIsLoadingAddReview(true);
  
    Either<ReviewModel> response = await reviewsRepository.addReview(
      params: addReviewBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddReview(false);
    }
  
    if (response.isRight) {
      setReview(response.right!);
  
      setIsLoadingAddReview(false);
    }
  }
  
  @action
  Future<void> editReview() async {
    setIsLoadingEditReview(true);
  
    Either<bool> response = await reviewsRepository.editReview(
      params: editReviewBodyParam,
      urlParams: editReviewUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditReview(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditReview(false);
    }
  }
  
}
