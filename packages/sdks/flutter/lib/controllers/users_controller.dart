// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'users_controller.g.dart';

class UsersController = UsersControllerBase with _$UsersController;

abstract class UsersControllerBase with Store, BaseController {
  final UsersRepository usersRepository;
  final AlertContract alert;
  final GoRouter router;

  UsersControllerBase(this.usersRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  List<UserModel> listUser = [];
  
  @observable
  late UserModel user;
  
  @observable
  late FcmTokenModel fcmToken;
  
  @observable
  late AddFcmTokenBodyParam addFcmTokenBodyParam;
  
  @observable
  late EditUserBodyParam editUserBodyParam;
  
  @observable
  late EditUserUrlParam editUserUrlParam;
  
  @observable
  late SignInUserBodyParam signInUserBodyParam;
  
  @observable
  late SignUpUserBodyParam signUpUserBodyParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingListUsers = false;
  
  @observable
  bool isLoadingMeUser = false;
  
  @observable
  bool isLoadingAddFcmToken = false;
  
  @observable
  bool isLoadingEditUser = false;
  
  @observable
  bool isLoadingSignInUser = false;
  
  @observable
  bool isLoadingSignUpUser = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setListUser(List<UserModel> data) {
    listUser = data;
  }
  
  @action
  void setUser(UserModel data) {
    user = data;
  }
  
  @action
  void setFcmToken(FcmTokenModel data) {
    fcmToken = data;
  }
  
  @action
  void setAddFcmTokenBodyParam(AddFcmTokenBodyParam data) {
    addFcmTokenBodyParam = data;
  }
  
  @action
  void setEditUserBodyParam(EditUserBodyParam data) {
    editUserBodyParam = data;
  }
  
  @action
  void setEditUserUrlParam(EditUserUrlParam data) {
    editUserUrlParam = data;
  }
  
  @action
  void setSignInUserBodyParam(SignInUserBodyParam data) {
    signInUserBodyParam = data;
  }
  
  @action
  void setSignUpUserBodyParam(SignUpUserBodyParam data) {
    signUpUserBodyParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingListUsers(bool isLoading) {
    isLoadingListUsers = isLoading;
  }
  
  @action
  void setIsLoadingMeUser(bool isLoading) {
    isLoadingMeUser = isLoading;
  }
  
  @action
  void setIsLoadingAddFcmToken(bool isLoading) {
    isLoadingAddFcmToken = isLoading;
  }
  
  @action
  void setIsLoadingEditUser(bool isLoading) {
    isLoadingEditUser = isLoading;
  }
  
  @action
  void setIsLoadingSignInUser(bool isLoading) {
    isLoadingSignInUser = isLoading;
  }
  
  @action
  void setIsLoadingSignUpUser(bool isLoading) {
    isLoadingSignUpUser = isLoading;
  }
  
  @action
  Future<void> listUsers() async {
    setIsLoadingListUsers(true);
  
    Either<PaginatedData<UserModel>> response = await usersRepository.listUsers();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListUsers(false);
    }
  
    if (response.isRight) {
      setListUser(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListUsers(false);
    }
  }
  
  @action
  Future<void> meUser() async {
    setIsLoadingMeUser(true);
  
    Either<UserModel> response = await usersRepository.meUser();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingMeUser(false);
    }
  
    if (response.isRight) {
      setUser(response.right!);
  
      setIsLoadingMeUser(false);
    }
  }
  
  @action
  Future<void> addFcmToken() async {
    setIsLoadingAddFcmToken(true);
  
    Either<FcmTokenModel> response = await usersRepository.addFcmToken(
      params: addFcmTokenBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddFcmToken(false);
    }
  
    if (response.isRight) {
      setFcmToken(response.right!);
  
      setIsLoadingAddFcmToken(false);
    }
  }
  
  @action
  Future<void> editUser() async {
    setIsLoadingEditUser(true);
  
    Either<bool> response = await usersRepository.editUser(
      params: editUserBodyParam,
      urlParams: editUserUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditUser(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditUser(false);
    }
  }
  
  @action
  Future<void> signInUser() async {
    setIsLoadingSignInUser(true);
  
    Either<UserModel> response = await usersRepository.signInUser(
      params: signInUserBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingSignInUser(false);
    }
  
    if (response.isRight) {
      setUser(response.right!);
  
      setIsLoadingSignInUser(false);
    }
  }
  
  @action
  Future<void> signUpUser() async {
    setIsLoadingSignUpUser(true);
  
    Either<UserModel> response = await usersRepository.signUpUser(
      params: signUpUserBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingSignUpUser(false);
    }
  
    if (response.isRight) {
      setUser(response.right!);
  
      setIsLoadingSignUpUser(false);
    }
  }
  
}
