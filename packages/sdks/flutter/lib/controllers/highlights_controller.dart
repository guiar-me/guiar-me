// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'highlights_controller.g.dart';

class HighlightsController = HighlightsControllerBase with _$HighlightsController;

abstract class HighlightsControllerBase with Store, BaseController {
  final HighlightsRepository highlightsRepository;
  final AlertContract alert;
  final GoRouter router;

  HighlightsControllerBase(this.highlightsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late HighlightModel highlight;
  
  @observable
  List<HighlightModel> listHighlight = [];
  
  @observable
  late RemoveHighlightUrlParam removeHighlightUrlParam;
  
  @observable
  late FindHighlightUrlParam findHighlightUrlParam;
  
  @observable
  late AddHighlightBodyParam addHighlightBodyParam;
  
  @observable
  late EditHighlightBodyParam editHighlightBodyParam;
  
  @observable
  late EditHighlightUrlParam editHighlightUrlParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveHighlight = false;
  
  @observable
  bool isLoadingFindHighlight = false;
  
  @observable
  bool isLoadingListHighlights = false;
  
  @observable
  bool isLoadingAddHighlight = false;
  
  @observable
  bool isLoadingEditHighlight = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setHighlight(HighlightModel data) {
    highlight = data;
  }
  
  @action
  void setListHighlight(List<HighlightModel> data) {
    listHighlight = data;
  }
  
  @action
  void setRemoveHighlightUrlParam(RemoveHighlightUrlParam data) {
    removeHighlightUrlParam = data;
  }
  
  @action
  void setFindHighlightUrlParam(FindHighlightUrlParam data) {
    findHighlightUrlParam = data;
  }
  
  @action
  void setAddHighlightBodyParam(AddHighlightBodyParam data) {
    addHighlightBodyParam = data;
  }
  
  @action
  void setEditHighlightBodyParam(EditHighlightBodyParam data) {
    editHighlightBodyParam = data;
  }
  
  @action
  void setEditHighlightUrlParam(EditHighlightUrlParam data) {
    editHighlightUrlParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveHighlight(bool isLoading) {
    isLoadingRemoveHighlight = isLoading;
  }
  
  @action
  void setIsLoadingFindHighlight(bool isLoading) {
    isLoadingFindHighlight = isLoading;
  }
  
  @action
  void setIsLoadingListHighlights(bool isLoading) {
    isLoadingListHighlights = isLoading;
  }
  
  @action
  void setIsLoadingAddHighlight(bool isLoading) {
    isLoadingAddHighlight = isLoading;
  }
  
  @action
  void setIsLoadingEditHighlight(bool isLoading) {
    isLoadingEditHighlight = isLoading;
  }
  
  @action
  Future<void> removeHighlight() async {
    setIsLoadingRemoveHighlight(true);
  
    Either<bool> response = await highlightsRepository.removeHighlight(
      urlParams: removeHighlightUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveHighlight(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveHighlight(false);
    }
  }
  
  @action
  Future<void> findHighlight() async {
    setIsLoadingFindHighlight(true);
  
    Either<HighlightModel> response = await highlightsRepository.findHighlight(
      urlParams: findHighlightUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindHighlight(false);
    }
  
    if (response.isRight) {
      setHighlight(response.right!);
  
      setIsLoadingFindHighlight(false);
    }
  }
  
  @action
  Future<void> listHighlights() async {
    setIsLoadingListHighlights(true);
  
    Either<PaginatedData<HighlightModel>> response = await highlightsRepository.listHighlights();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListHighlights(false);
    }
  
    if (response.isRight) {
      setListHighlight(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListHighlights(false);
    }
  }
  
  @action
  Future<void> addHighlight() async {
    setIsLoadingAddHighlight(true);
  
    Either<HighlightModel> response = await highlightsRepository.addHighlight(
      params: addHighlightBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddHighlight(false);
    }
  
    if (response.isRight) {
      setHighlight(response.right!);
  
      setIsLoadingAddHighlight(false);
    }
  }
  
  @action
  Future<void> editHighlight() async {
    setIsLoadingEditHighlight(true);
  
    Either<bool> response = await highlightsRepository.editHighlight(
      params: editHighlightBodyParam,
      urlParams: editHighlightUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditHighlight(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditHighlight(false);
    }
  }
  
}
