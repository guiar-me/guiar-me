// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'subscriptions_controller.g.dart';

class SubscriptionsController = SubscriptionsControllerBase with _$SubscriptionsController;

abstract class SubscriptionsControllerBase with Store, BaseController {
  final SubscriptionsRepository subscriptionsRepository;
  final AlertContract alert;
  final GoRouter router;

  SubscriptionsControllerBase(this.subscriptionsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late SubscriptionModel subscription;
  
  @observable
  List<SubscriptionModel> listSubscription = [];
  
  @observable
  late RemoveSubscriptionUrlParam removeSubscriptionUrlParam;
  
  @observable
  late FindSubscriptionUrlParam findSubscriptionUrlParam;
  
  @observable
  late AddSubscriptionBodyParam addSubscriptionBodyParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveSubscription = false;
  
  @observable
  bool isLoadingFindSubscription = false;
  
  @observable
  bool isLoadingListSubscriptions = false;
  
  @observable
  bool isLoadingAddSubscription = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setSubscription(SubscriptionModel data) {
    subscription = data;
  }
  
  @action
  void setListSubscription(List<SubscriptionModel> data) {
    currentPage == 1
      ? listSubscription = data
      : listSubscription = [...listSubscription, ...data];
  }
  
  @action
  void setRemoveSubscriptionUrlParam(RemoveSubscriptionUrlParam data) {
    removeSubscriptionUrlParam = data;
  }
  
  @action
  void setFindSubscriptionUrlParam(FindSubscriptionUrlParam data) {
    findSubscriptionUrlParam = data;
  }
  
  @action
  void setAddSubscriptionBodyParam(AddSubscriptionBodyParam data) {
    addSubscriptionBodyParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveSubscription(bool isLoading) {
    isLoadingRemoveSubscription = isLoading;
  }
  
  @action
  void setIsLoadingFindSubscription(bool isLoading) {
    isLoadingFindSubscription = isLoading;
  }
  
  @action
  void setIsLoadingListSubscriptions(bool isLoading) {
    currentPage == 1
      ? isLoadingListSubscriptions = isLoading
      : setIsLoadingNextPage(isLoading);
  }
  
  @action
  void setIsLoadingAddSubscription(bool isLoading) {
    isLoadingAddSubscription = isLoading;
  }
  
  @action
  Future<bool> removeSubscription() async {
    setIsLoadingRemoveSubscription(true);
  
    Either<bool> response = await subscriptionsRepository.removeSubscription(
      urlParams: removeSubscriptionUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveSubscription(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveSubscription(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> findSubscription() async {
    setIsLoadingFindSubscription(true);
  
    Either<SubscriptionModel> response = await subscriptionsRepository.findSubscription(
      urlParams: findSubscriptionUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindSubscription(false);
  
      return false;
    }
  
    if (response.isRight) {
      setSubscription(response.right!);
  
      setIsLoadingFindSubscription(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> listSubscriptions() async {
    setIsLoadingListSubscriptions(true);
  
    Either<PaginatedData<SubscriptionModel>> response = await subscriptionsRepository.listSubscriptions();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListSubscriptions(false);
  
      return false;
    }
  
    if (response.isRight) {
      setListSubscription(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListSubscriptions(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> addSubscription() async {
    setIsLoadingAddSubscription(true);
  
    Either<SubscriptionModel> response = await subscriptionsRepository.addSubscription(
      params: addSubscriptionBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddSubscription(false);
  
      return false;
    }
  
    if (response.isRight) {
      setSubscription(response.right!);
  
      setIsLoadingAddSubscription(false);
  
      return true;
    }
  
    return false;
  }
  
}
