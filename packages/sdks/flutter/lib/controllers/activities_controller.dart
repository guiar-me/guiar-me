// This file is auto generated. DO NOT edit this file manually!
import 'dart:typed_data';
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'activities_controller.g.dart';

class ActivitiesController = ActivitiesControllerBase with _$ActivitiesController;

abstract class ActivitiesControllerBase with Store, BaseController {
  final ActivitiesRepository activitiesRepository;
  final AlertContract alert;
  final GoRouter router;

  ActivitiesControllerBase(this.activitiesRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late ActivityModel activity;
  
  @observable
  List<ActivityModel> listActivity = [];
  
  @observable
  late RemoveActivityUrlParam removeActivityUrlParam;
  
  @observable
  late FindActivityUrlParam findActivityUrlParam;
  
  @observable
  late ListActivitiesQueryParam listActivitiesQueryParam;
  
  @observable
  late AddActivityBodyParam addActivityBodyParam;
  
  @observable
  late EditActivityBodyParam editActivityBodyParam;
  
  @observable
  late EditActivityUrlParam editActivityUrlParam;
  
  @observable
  String? imageName;
  
  @observable
  Uint8List? imageBytes;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveActivity = false;
  
  @observable
  bool isLoadingFindActivity = false;
  
  @observable
  bool isLoadingListActivities = false;
  
  @observable
  bool isLoadingAddActivity = false;
  
  @observable
  bool isLoadingEditActivity = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setActivity(ActivityModel data) {
    activity = data;
  }
  
  @action
  void setListActivity(List<ActivityModel> data) {
    listActivity = data;
  }
  
  @action
  void setRemoveActivityUrlParam(RemoveActivityUrlParam data) {
    removeActivityUrlParam = data;
  }
  
  @action
  void setFindActivityUrlParam(FindActivityUrlParam data) {
    findActivityUrlParam = data;
  }
  
  @action
  void setListActivitiesQueryParam(ListActivitiesQueryParam data) {
    listActivitiesQueryParam = data;
  }
  
  @action
  void setAddActivityBodyParam(AddActivityBodyParam data) {
    addActivityBodyParam = data;
  }
  
  @action
  void setEditActivityBodyParam(EditActivityBodyParam data) {
    editActivityBodyParam = data;
  }
  
  @action
  void setEditActivityUrlParam(EditActivityUrlParam data) {
    editActivityUrlParam = data;
  }
  
  @action
  void setImageName(String data) {
    imageName = data;
  }
  
  @action
  void setImageBytes(Uint8List data) {
    imageBytes = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveActivity(bool isLoading) {
    isLoadingRemoveActivity = isLoading;
  }
  
  @action
  void setIsLoadingFindActivity(bool isLoading) {
    isLoadingFindActivity = isLoading;
  }
  
  @action
  void setIsLoadingListActivities(bool isLoading) {
    isLoadingListActivities = isLoading;
  }
  
  @action
  void setIsLoadingAddActivity(bool isLoading) {
    isLoadingAddActivity = isLoading;
  }
  
  @action
  void setIsLoadingEditActivity(bool isLoading) {
    isLoadingEditActivity = isLoading;
  }
  
  @action
  Future<void> removeActivity() async {
    setIsLoadingRemoveActivity(true);
  
    Either<bool> response = await activitiesRepository.removeActivity(
      urlParams: removeActivityUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveActivity(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveActivity(false);
    }
  }
  
  @action
  Future<void> findActivity() async {
    setIsLoadingFindActivity(true);
  
    Either<ActivityModel> response = await activitiesRepository.findActivity(
      urlParams: findActivityUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindActivity(false);
    }
  
    if (response.isRight) {
      setActivity(response.right!);
  
      setIsLoadingFindActivity(false);
    }
  }
  
  @action
  Future<void> listActivities() async {
    setIsLoadingListActivities(true);
  
    Either<PaginatedData<ActivityModel>> response = await activitiesRepository.listActivities(
      queryParams: listActivitiesQueryParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListActivities(false);
    }
  
    if (response.isRight) {
      setListActivity(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListActivities(false);
    }
  }
  
  @action
  Future<void> addActivity() async {
    setIsLoadingAddActivity(true);
  
    Either<ActivityModel> response = await activitiesRepository.addActivity(
      params: addActivityBodyParam.copyWith(
        imageName: imageName,
        imageBytes: imageBytes,
      ),
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddActivity(false);
    }
  
    if (response.isRight) {
      setActivity(response.right!);
  
      setIsLoadingAddActivity(false);
    }
  }
  
  @action
  Future<void> editActivity() async {
    setIsLoadingEditActivity(true);
  
    Either<bool> response = await activitiesRepository.editActivity(
      params: editActivityBodyParam.copyWith(
        imageName: imageName,
        imageBytes: imageBytes,
      ),
      urlParams: editActivityUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditActivity(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditActivity(false);
    }
  }
  
}
