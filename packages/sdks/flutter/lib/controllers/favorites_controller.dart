// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'favorites_controller.g.dart';

class FavoritesController = FavoritesControllerBase with _$FavoritesController;

abstract class FavoritesControllerBase with Store, BaseController {
  final FavoritesRepository favoritesRepository;
  final AlertContract alert;
  final GoRouter router;

  FavoritesControllerBase(this.favoritesRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  List<FavoriteModel> listFavorite = [];
  
  @observable
  late FavoriteModel favorite;
  
  @observable
  late RemoveFavoriteUrlParam removeFavoriteUrlParam;
  
  @observable
  late AddFavoriteBodyParam addFavoriteBodyParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveFavorite = false;
  
  @observable
  bool isLoadingListFavorites = false;
  
  @observable
  bool isLoadingAddFavorite = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setListFavorite(List<FavoriteModel> data) {
    listFavorite = data;
  }
  
  @action
  void setFavorite(FavoriteModel data) {
    favorite = data;
  }
  
  @action
  void setRemoveFavoriteUrlParam(RemoveFavoriteUrlParam data) {
    removeFavoriteUrlParam = data;
  }
  
  @action
  void setAddFavoriteBodyParam(AddFavoriteBodyParam data) {
    addFavoriteBodyParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveFavorite(bool isLoading) {
    isLoadingRemoveFavorite = isLoading;
  }
  
  @action
  void setIsLoadingListFavorites(bool isLoading) {
    isLoadingListFavorites = isLoading;
  }
  
  @action
  void setIsLoadingAddFavorite(bool isLoading) {
    isLoadingAddFavorite = isLoading;
  }
  
  @action
  Future<void> removeFavorite() async {
    setIsLoadingRemoveFavorite(true);
  
    Either<bool> response = await favoritesRepository.removeFavorite(
      urlParams: removeFavoriteUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveFavorite(false);
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveFavorite(false);
    }
  }
  
  @action
  Future<void> listFavorites() async {
    setIsLoadingListFavorites(true);
  
    Either<PaginatedData<FavoriteModel>> response = await favoritesRepository.listFavorites();
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListFavorites(false);
    }
  
    if (response.isRight) {
      setListFavorite(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListFavorites(false);
    }
  }
  
  @action
  Future<void> addFavorite() async {
    setIsLoadingAddFavorite(true);
  
    Either<FavoriteModel> response = await favoritesRepository.addFavorite(
      params: addFavoriteBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddFavorite(false);
    }
  
    if (response.isRight) {
      setFavorite(response.right!);
  
      setIsLoadingAddFavorite(false);
    }
  }
  
}
