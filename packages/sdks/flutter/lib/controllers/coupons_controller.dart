// This file is auto generated. DO NOT edit this file manually!
import 'package:go_router/go_router.dart';
import 'package:mobx/mobx.dart';
import 'package:sdk_flutter/sdk_flutter.dart';

part 'coupons_controller.g.dart';

class CouponsController = CouponsControllerBase with _$CouponsController;

abstract class CouponsControllerBase with Store, BaseController {
  final CouponsRepository couponsRepository;
  final AlertContract alert;
  final GoRouter router;

  CouponsControllerBase(this.couponsRepository, this.alert, this.router);

  // States
  @observable
  int currentPage = 1;
  
  @observable
  int lastPage = 1;
  
  @observable
  late CouponModel coupon;
  
  @observable
  List<CouponModel> listCoupon = [];
  
  @observable
  late RemoveCouponUrlParam removeCouponUrlParam;
  
  @observable
  late FindCouponUrlParam findCouponUrlParam;
  
  @observable
  late ListCouponsQueryParam listCouponsQueryParam;
  
  @observable
  late AddCouponBodyParam addCouponBodyParam;
  
  @observable
  late EditCouponBodyParam editCouponBodyParam;
  
  @observable
  late EditCouponUrlParam editCouponUrlParam;
  
  @observable
  bool isLoadingNextPage = false;
  
  @observable
  bool isLoadingRemoveCoupon = false;
  
  @observable
  bool isLoadingFindCoupon = false;
  
  @observable
  bool isLoadingListCoupons = false;
  
  @observable
  bool isLoadingAddCoupon = false;
  
  @observable
  bool isLoadingEditCoupon = false;
  

  // Actions
  @action
  void setCurrentPage(int data) {
    currentPage = data;
  }
  
  @action
  void setLastPage(int data) {
    lastPage = data;
  }
  
  @action
  void setCoupon(CouponModel data) {
    coupon = data;
  }
  
  @action
  void setListCoupon(List<CouponModel> data) {
    currentPage == 1
      ? listCoupon = data
      : listCoupon = [...listCoupon, ...data];
  }
  
  @action
  void setRemoveCouponUrlParam(RemoveCouponUrlParam data) {
    removeCouponUrlParam = data;
  }
  
  @action
  void setFindCouponUrlParam(FindCouponUrlParam data) {
    findCouponUrlParam = data;
  }
  
  @action
  void setListCouponsQueryParam(ListCouponsQueryParam data) {
    listCouponsQueryParam = data;
  }
  
  @action
  void setAddCouponBodyParam(AddCouponBodyParam data) {
    addCouponBodyParam = data;
  }
  
  @action
  void setEditCouponBodyParam(EditCouponBodyParam data) {
    editCouponBodyParam = data;
  }
  
  @action
  void setEditCouponUrlParam(EditCouponUrlParam data) {
    editCouponUrlParam = data;
  }
  
  @action
  void setIsLoadingNextPage(bool isLoading) {
    isLoadingNextPage = isLoading;
  }
  
  @action
  void setIsLoadingRemoveCoupon(bool isLoading) {
    isLoadingRemoveCoupon = isLoading;
  }
  
  @action
  void setIsLoadingFindCoupon(bool isLoading) {
    isLoadingFindCoupon = isLoading;
  }
  
  @action
  void setIsLoadingListCoupons(bool isLoading) {
    currentPage == 1
      ? isLoadingListCoupons = isLoading
      : setIsLoadingNextPage(isLoading);
  }
  
  @action
  void setIsLoadingAddCoupon(bool isLoading) {
    isLoadingAddCoupon = isLoading;
  }
  
  @action
  void setIsLoadingEditCoupon(bool isLoading) {
    isLoadingEditCoupon = isLoading;
  }
  
  @action
  Future<bool> removeCoupon() async {
    setIsLoadingRemoveCoupon(true);
  
    Either<bool> response = await couponsRepository.removeCoupon(
      urlParams: removeCouponUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingRemoveCoupon(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingRemoveCoupon(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> findCoupon() async {
    setIsLoadingFindCoupon(true);
  
    Either<CouponModel> response = await couponsRepository.findCoupon(
      urlParams: findCouponUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingFindCoupon(false);
  
      return false;
    }
  
    if (response.isRight) {
      setCoupon(response.right!);
  
      setIsLoadingFindCoupon(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> listCoupons() async {
    setIsLoadingListCoupons(true);
  
    Either<PaginatedData<CouponModel>> response = await couponsRepository.listCoupons(
      queryParams: listCouponsQueryParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingListCoupons(false);
  
      return false;
    }
  
    if (response.isRight) {
      setListCoupon(response.right!.data);
      setLastPage(response.right!.meta.lastPage);
  
      setIsLoadingListCoupons(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> addCoupon() async {
    setIsLoadingAddCoupon(true);
  
    Either<CouponModel> response = await couponsRepository.addCoupon(
      params: addCouponBodyParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingAddCoupon(false);
  
      return false;
    }
  
    if (response.isRight) {
      setCoupon(response.right!);
  
      setIsLoadingAddCoupon(false);
  
      return true;
    }
  
    return false;
  }
  
  @action
  Future<bool> editCoupon() async {
    setIsLoadingEditCoupon(true);
  
    Either<bool> response = await couponsRepository.editCoupon(
      params: editCouponBodyParam,
      urlParams: editCouponUrlParam,
    );
  
    if (response.isLeft) {
      handleApiError(response.left!, alert, router);
  
      setIsLoadingEditCoupon(false);
  
      return false;
    }
  
    if (response.isRight) {
      // TODO: refresh state or navigate to another page
      setIsLoadingEditCoupon(false);
  
      return true;
    }
  
    return false;
  }
  
}
