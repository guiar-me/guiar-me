// This file is auto generated. DO NOT edit this file manually!
import 'package:sdk_flutter/sdk_flutter.dart';

class UsersRepository {
  final HttpClientContract _httpClient;
  final SecureStorageContract _secureStorage;

  UsersRepository(
    this._httpClient,
    this._secureStorage,
  );
  
  FutureEither<PaginatedData<UserModel>> listUsers() async {
    Either<PaginatedData<dynamic>> response = await _httpClient.index(
      url: 'api/users',
    );

    return response.isRight
      ? Right<PaginatedData<UserModel>>(PaginatedData<UserModel>(
        data: UserModel.fromList(response.right!.data),
        meta: response.right!.meta,
      ))
      : Left<PaginatedData<UserModel>>(response.left!);
  }
  
  FutureEither<UserModel> meUser() async {
    Either<Json> response = await _httpClient.get(
      url: 'api/users/me',
    );

    return response.isRight
      ? Right<UserModel>(UserModel.fromMap(response.right!))
      : Left<UserModel>(response.left!);
  }
  
  FutureEither<FcmTokenModel> addFcmToken({
    required AddFcmTokenBodyParam params,
  }) async {
    Either<Json> response = await _httpClient.post(
      url: 'api/users/fcm-token',
      data: params.toMap(),
    );

    return response.isRight
      ? Right<FcmTokenModel>(FcmTokenModel.fromMap(response.right!))
      : Left<FcmTokenModel>(response.left!);
  }
  
  FutureEither<bool> editUser({
    required EditUserBodyParam params,
    required EditUserUrlParam urlParams,
  }) async {
    Either<bool> response = await _httpClient.put(
      url: 'api/users/{user_id}',
      data: params.toMap(),
      urlParams: urlParams.toMap(),
    );

    return response.isRight
      ? Right<bool>(response.right!)
      : Left<bool>(response.left!);
  }
  
  FutureEither<UserModel> signInUser({
    required SignInUserBodyParam params,
  }) async {
    Either<Json> response = await _httpClient.post(
      url: 'api/users/sign-in',
      data: params.toMap(),
    );

    if (response.isLeft) {
      return Left<UserModel>(response.left!);
    }

    UserModel authenticatedUser = UserModel.fromMap(response.right!);

    await _secureStorage.set(
      key: Constants.authorizationTokenKey,
      value: authenticatedUser.authorization,
    );

    return Right(authenticatedUser);
  }
  
  FutureEither<UserModel> signUpUser({
    required SignUpUserBodyParam params,
  }) async {
    Either<Json> response = await _httpClient.post(
      url: 'api/users/sign-up',
      data: params.toMap(),
    );

    if (response.isLeft) {
      return Left<UserModel>(response.left!);
    }

    UserModel authenticatedUser = UserModel.fromMap(response.right!);

    await _secureStorage.set(
      key: Constants.authorizationTokenKey,
      value: authenticatedUser.authorization,
    );

    return Right(authenticatedUser);
  }
  
}
