// This file is auto generated. DO NOT edit this file manually!
import 'package:sdk_flutter/sdk_flutter.dart';

class ReviewsRepository {
  final HttpClientContract _httpClient;

  ReviewsRepository(
    this._httpClient,
  );
  
  FutureEither<bool> removeReview({
    required RemoveReviewUrlParam urlParams,
  }) async {
    Either<bool> response = await _httpClient.delete(
      url: 'api/reviews/{review_id}',
      urlParams: urlParams.toMap(),
    );

    return response.isRight
      ? Right<bool>(response.right!)
      : Left<bool>(response.left!);
  }
  
  FutureEither<ReviewModel> findReview({
    required FindReviewUrlParam urlParams,
  }) async {
    Either<Json> response = await _httpClient.get(
      url: 'api/reviews/{review_id}',
      urlParams: urlParams.toMap(),
    );

    return response.isRight
      ? Right<ReviewModel>(ReviewModel.fromMap(response.right!))
      : Left<ReviewModel>(response.left!);
  }
  
  FutureEither<PaginatedData<ReviewModel>> listReviews({
    required ListReviewsQueryParam queryParams,
  }) async {
    Either<PaginatedData<dynamic>> response = await _httpClient.index(
      url: 'api/reviews',
      queryParams: queryParams.toMap(),
    );

    return response.isRight
      ? Right<PaginatedData<ReviewModel>>(PaginatedData<ReviewModel>(
        data: ReviewModel.fromList(response.right!.data),
        meta: response.right!.meta,
      ))
      : Left<PaginatedData<ReviewModel>>(response.left!);
  }
  
  FutureEither<bool> updateReview({
    required UpdateReviewBodyParam params,
    required UpdateReviewUrlParam urlParams,
  }) async {
    Either<bool> response = await _httpClient.patch(
      url: 'api/reviews/{review_id}',
      data: params.toMap(),
      urlParams: urlParams.toMap(),
    );

    return response.isRight
      ? Right<bool>(response.right!)
      : Left<bool>(response.left!);
  }
  
  FutureEither<ReviewModel> addReview({
    required AddReviewBodyParam params,
  }) async {
    Either<Json> response = await _httpClient.post(
      url: 'api/reviews',
      data: params.toMap(),
    );

    return response.isRight
      ? Right<ReviewModel>(ReviewModel.fromMap(response.right!))
      : Left<ReviewModel>(response.left!);
  }
  
  FutureEither<bool> editReview({
    required EditReviewBodyParam params,
    required EditReviewUrlParam urlParams,
  }) async {
    Either<bool> response = await _httpClient.put(
      url: 'api/reviews/{review_id}',
      data: params.toMap(),
      urlParams: urlParams.toMap(),
    );

    return response.isRight
      ? Right<bool>(response.right!)
      : Left<bool>(response.left!);
  }
  
}
